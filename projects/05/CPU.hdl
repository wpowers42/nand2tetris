// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // A-instructions start with 0
    // C-instructions start with 1
    // c    codes: 11,10,9,8,7,6
    // dest codes: 5,4,3
    // jump codes: 2,1,0

    /***********
    * A register + addressM
    ***********/
    // use instruction as address if instruction starts with 0
    Mux16(a=instruction, b=aluoutput, sel=instruction[15], out=mux16oa);
    // old: load instruction into A register if dest code is 1XX
    // if A-instruction, load instruction into A register
    Not(in=instruction[15], out=isa);
    Or(a=isa, b=instruction[5], out=loada);
    
    ARegister(in=mux16oa, load=loada, out=aregistero, out[0..14]=aregistero15, out[0..14]=addressM);

    /***********
    * D register
    ***********/
    // load instruction into D register if dest code is X1X
    DRegister(in=aluoutput, load=instruction[4], out=dregistero);
    
    /***********
    * ALU
    ***********/
    // load ALU input from M value if a bit is 1
    Mux16(a=aregistero, b=inM, sel=instruction[12], out=mux16ob);
    ALU(x=dregistero,       y=mux16ob,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9],  ny=instruction[8],
        f=instruction[7],   no=instruction[6]],
        out=aluoutput,      out=outM,
        zr=zr, ng=ng);

    /***********
    * Jump logic
    ***********/
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    DMux8Way(in=true, sel=instruction[0..2], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

    // nul 000 | false
    And(a=a, b=false, out=nul);

    // JGT 001 | zr=0 AND ng=0
    And(a=notzr, b=notng, out=jgtand);
    And(a=b, b=jgtand, out=jgt);
    
    // JEQ 010 | zr=1
    And(a=c, b=zr, out=jeq);

    // JGE 011 | zr=1 OR ng=0
    Or(a=zr, b=notng, out=jgeor);
    And(a=d, b=jgeor, out=jge);
    
    // JLT 100 | ng=1
    And(a=e, b=ng, out=jlt);

    // JNE 101 | zr=0
    And(a=f, b=notzr, out=jne);

    // JLE 110 | zr=1 OR ng=1
    Or(a=zr, b=ng, out=jleor);
    And(a=g, b=jleor, out=jle);

    // JMP 111 | true
    And(a=h, b=true, out=jmp);

    Or8Way(in[0]=nul, in[1]=jgt, in[2]=jeq, in[3]=jge,
           in[4]=jlt, in[5]=jne, in[6]=jle, in[7]=jmp,
           out=jumpor);

    And(a=instruction[15], b=jumpor, out=jump);

    /***********
    * writeM
    ***********/
    // writeM if C-instruction and M dest code is 1
    And(a=instruction[15], b=instruction[3], out=writeM);

    /***********
    * PC
    ***********/
    // if jump,  inc=0, load=1, reset=0
    // if reset, inc=0, load=0, reset=1
    // else,     inc=1, load=0, reset=0
    Not(in=reset, out=inc);
    PC(in[0..14]=aregistero15, load=jump, inc=inc, reset=reset, out[0..14]=pc);
}